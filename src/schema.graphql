type Query {
    users(query: String): [User!]!
    me: User!
    post: Post!
    posts(query: String): [Post!]!
    comments: [Comment!]!
}

type Mutation {
    createUser(data: CreateUserInput!): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput): User!
    createPost(data: CreatedPostInput): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput): Post!
    createComment(data: CreatedCommentInput): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Subscription {
    count: Int!
    comment(postId: ID!): Comment!
}

input CreateUserInput {
    name: String!, 
    email: String!, 
    age: Int!
}

input UpdateUserInput {
    name: String,
    email: String,
    age: Int
}

input CreatedPostInput {
    title: String!, 
    body: String!, 
    published: String!, 
    author: ID!
}

input UpdatePostInput {
    title: String
    body: String
}

input CreatedCommentInput {
    text: String!, 
    author: ID!, 
    post: ID!
}

input UpdateCommentInput {
    text: String  
}

type User{
    id: ID!
    name: String!
    email: String!
    age: Int!
    posts: [Post!]!
    comments: [Comment!]!
}
type Post {
    id: ID!
    title: String!
    body: String!
    published: String!
    author: User!
    comments: [Comment!]!
}
type Comment{
    id: ID!
    text: String!
    author: [User!]!
    post: [Post!]!
}